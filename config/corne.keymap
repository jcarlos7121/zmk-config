/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        bt_next: bt_next {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp TILDE>, <&bt BT_NXT>;

            mods = <(MOD_RALT)>;
        };

        bt_clear: bt_clear {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CARET>, <&bt BT_CLR>;

            mods = <(MOD_RALT)>;
        };

        escape_q: escape_q {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp ESC>;

            mods = <(MOD_RSFT|MOD_RALT)>; // Needs to be right shift other wise I would not be able to type capital Q
            // keep-mods = <(MOD_LCTL|MOD_LGUI)>;
        };

        rpi: require_prior_idle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kt ESCAPE>;
            key-positions = <18 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q         &kp W  &kp E     &kp R      &kp T        &kp Y          &kp U  &kp I      &kp O    &kp P     &none
&none  &rpi LCTRL A  &kp S  &kp D     &kp F      &kp G        &rpi RSHIFT H  &kp J  &kp K      &kp L    &kp SEMI  &none
&none  &mt LSHIFT Z  &kp X  &kp C     &kp V      &kp B        &kp N          &kp M  &kp COMMA  &kp DOT  &mo 2     &none
                            &kp LGUI  &kp LSHFT  &kp SPACE    &kp RET        &mo 1  &kp RALT
            >;
        };

        lower_layer {
            bindings = <
&none  &kp N1        &kp N2        &kp N3        &kp N4     &kp N5       &kp N6    &kp N7      &kp N8          &kp N9      &kp N0           &none
&none  &mt LCTRL F1  &kp F2        &kp F3        &kp F4     &kp F5       &kp LEFT  &kp DOWN    &kp UP          &kp RIGHT   &kp APOS         &none
&none  &kp LSHFT     &kp C_VOL_DN  &kp C_VOL_UP  &kp PG_DN  &kp PG_UP    &kp BSPC  &kp DELETE  &kp LEFT_BRACE  &kp C_MUTE  &kp RIGHT_BRACE  &none
                                   &kp LGUI      &trans     &kp SPACE    &kp RET   &trans      &kp RALT
            >;
        };

        raise_layer {
            bindings = <
&none  &kp TAB    &kp EXCL   &kp AT    &kp HASH       &kp DOLLAR     &kp UNDER      &kp EQUAL  &kp LPAR          &kp RPAR           &kp APOS  &none
&none  &kp LCTRL  &kp A      &kp AMPS  &kp KP_DIVIDE  &kp PERCENT    &kp MINUS      &kp PLUS   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp STAR  &none
&none  &trans     &bt_clear  &bt_next  &kp BSLH       &trans         &kp SEMICOLON  &kp COLON  &kp PIPE          &kp QMARK          &kp PIPE  &none
                             &kp LGUI  &trans         &kp SPACE      &kp RET        &trans     &kp RALT
            >;
        };
    };
};
